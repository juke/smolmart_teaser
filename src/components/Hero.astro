---
interface Props {
  logo: ImageMetadata;
  smol2: ImageMetadata;
  smol3: ImageMetadata;
  smol4: ImageMetadata;
  waitlist_bg: ImageMetadata;
}

import { Image } from 'astro:assets';
import { Banana } from 'lucide-react';
import { Badge } from "@/components/ui/badge";
const { logo, smol2, smol3, smol4, waitlist_bg } = Astro.props;
---

<div class="flex flex-col items-center gap-8 sm:gap-12 text-center max-w-5xl mx-auto">
  <div class="space-y-6 sm:space-y-10 w-full max-w-3xl mx-auto">
    <div class="w-full px-4 sm:px-8 md:px-12">
      <img
        src={logo.src}
        alt="Smolmart Logo"
        class="w-full max-w-[380px] sm:max-w-[460px] md:max-w-[580px] mx-auto animate-logo-intro drop-shadow-logo hover:scale-[1.02] transition-all duration-500"
        style="object-fit: contain; height: auto;"
      />
    </div>
    
    <div class="relative px-4 sm:px-8 space-y-8">
      <div class="relative w-full max-w-4xl mx-auto">
        <h2 class="text-4xl sm:text-5xl md:text-6xl font-black tracking-wider relative group animate-title-intro opacity-0">
          <span class="relative block mb-4">
            <span class="animate-gradient bg-gradient-to-r from-[#FFB938] via-[#2EAE4E] via-[#1A7431] via-[#4ECB71] to-[#FFB938] bg-[length:400%_auto] bg-clip-text text-transparent drop-shadow-glow tracking-wide">Meme-Driven</span>
          </span>
          <span class="relative block">
            <span class="animate-gradient bg-gradient-to-r from-[#FFB938] via-[#2EAE4E] via-[#1A7431] via-[#4ECB71] to-[#FFB938] bg-[length:400%_auto] bg-clip-text text-transparent drop-shadow-glow tracking-wide">Art Marketplace</span>
          </span>
        </h2>
      </div>

      <p class="relative text-lg sm:text-xl md:text-2xl font-medium max-w-3xl mx-auto leading-relaxed tracking-wide animate-text-intro opacity-0">
        <span class="relative text-[#FFB938] drop-shadow-[0_3px_6px_rgba(0,0,0,0.3)] tracking-wide">Turn your favorite memes into <span class="font-bold tracking-wide">legendary art pieces
        <br class="hidden sm:block" />
        <span class="relative text-[#4ECB71] drop-shadow-[0_3px_6px_rgba(0,0,0,0.3)] tracking-wide">Join our jungle of creators, collect rare <span class="font-bold text-[#2EAE4E] tracking-wide">meme-sterpieces</span></span>
        <br class="hidden sm:block" />
        <span class="relative text-[#FFB938] drop-shadow-[0_3px_6px_rgba(0,0,0,0.3] tracking-wide">and stack those sweet, sweet <span class="font-bold animate-pulse-slow inline-flex items-center gap-1 tracking-wide">
          bananas <Banana className="w-6 h-6" />
        
      </p>
    </div>
  </div>

  <!-- Hidden images for Three.js textures -->
  <div class="hidden">
    <img src={smol2.src} alt="Art Example 1" id="texture1" />
    <img src={smol3.src} alt="Art Example 2" id="texture2" />
    <img src={smol4.src} alt="Art Example 3" id="texture3" />
  </div>

  <!-- Three.js Canvas Container -->
  <div class="relative w-full -mt-12 sm:-mt-20 mb-60 sm:mb-96">
    <div class="absolute left-1/2 -translate-x-1/2" style="width: 170%;">  <!-- Increased from 150% to 180% for mobile -->
      <canvas id="art-gallery" class="w-full h-[320px] sm:h-[400px] rounded-xl"></canvas>  <!-- Increased mobile height from 280px to 380px -->
    </div>
  </div>
  <div class="mt-16 sm:mt-0 w-full max-w-[36rem] mx-auto px-4 sm:px-6 animate-slide-up pb-4 sm:pb-0 group/form hover:scale-[1.02] transition-transform duration-500">
    <div class="relative overflow-hidden rounded-xl bg-[#5C3D2E]/40 shadow-lg hover:shadow-2xl transition-shadow duration-500">
      <Image 
        src={waitlist_bg} 
        alt="Wooden Background"
        class="absolute inset-0 w-full h-full object-cover brightness-[0.7] contrast-[1.1] saturate-[0.65] rounded-xl"
        width={1000}
        height={500}
      />
      <div class="relative z-10 p-4 sm:p-6 text-center space-y-4">
        <h3 class="text-2xl sm:text-3xl font-bold tracking-wide uppercase text-[#FFB938] drop-shadow-[0_2px_4px_rgba(0,0,0,0.6)] hover:drop-shadow-[0_3px_6px_rgba(0,0,0,0.7)] transition-all duration-300">
            <span class="text-shimmer">JOIN THE JUNGLE WAITLIST</span>
        </h3>
        <p class="text-white text-sm sm:text-base group-hover/form:text-white transition-colors duration-500 [text-shadow:0_1px_1px_rgba(0,0,0,0.9),0_-1px_1px_rgba(255,255,255,0.5)] mix-blend-overlay relative before:absolute before:inset-0 before:bg-[url('/wood-texture.png')] before:opacity-10 before:mix-blend-overlay before:pointer-events-none whitespace-nowrap tracking-wide">
          Be the first to explore our meme-driven art marketplace!
        </p>
        <div class="flex flex-col sm:flex-row gap-3 max-w-none mx-auto justify-center items-center">
          <input
            type="email"
            placeholder="Enter your email"
            class="w-full sm:w-[280px] px-4 py-1.5 h-9 rounded-full bg-[#2C1810]/80 backdrop-blur-sm border-2 border-[#8B4513]/40 focus:border-[#FFB938] outline-none text-white/90 placeholder:text-white/60 text-sm transition-colors duration-300 focus:ring-2 focus:ring-[#FFB938]/20 hover:border-[#8B4513] shadow-inner tracking-wide"
          />
          <button
            type="submit"
            class="w-full sm:w-auto h-9 px-6 rounded-full bg-[#3D1F10] hover:bg-[#4D2812] text-[#FFB938] font-bold text-sm transition-colors duration-300 shadow-[inset_0_1px_2px_rgba(255,255,255,0.05),inset_0_-1px_2px_rgba(0,0,0,0.2),0_2px_4px_rgba(0,0,0,0.4)] hover:shadow-[0_3px_6px_rgba(0,0,0,0.3),inset_0_1px_2px_rgba(255,255,255,0.1),inset_0_-1px_2px_rgba(0,0,0,0.2)] active:shadow-[inset_0_2px_4px_rgba(0,0,0,0.4)] border-2 border-[#8B4513]/30 whitespace-nowrap tracking-wide"
          >
            Get Early Access
          </button>
        </div>
        <div class="flex justify-center pt-1">
          <Badge variant="outline" className="gap-1.5 py-1 px-3 text-xs bg-black/60 backdrop-blur-sm border-0 text-white/90 transition-all duration-300 shadow-[inset_0_2px_4px_rgba(0,0,0,0.3),inset_0_-1px_2px_rgba(255,255,255,0.1)] rounded-full group relative overflow-hidden before:absolute before:inset-0 before:bg-[#FFB938]/5 before:rounded-full whitespace-nowrap tracking-wide">
            <Banana className="w-3 h-3 text-[#FFB938]/90 transition-transform duration-300 group-hover:scale-110 group-hover:rotate-12" />
            JOIN <span className="text-[#FFB938] font-bold text-xs px-0.5 group-hover:text-[#FFD938] transition-colors tracking-wide">420+</span> WAITING ARTISTS
          </Badge>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .text-shimmer {
    position: relative;
    display: inline-block;
    background: linear-gradient(to right, #FFB938 20%, #FFD938 30%, #FFE938 40%, #FFD938 50%, #FFB938 60%);
    background-size: 200% auto;
    color: transparent;
    background-clip: text;
    -webkit-background-clip: text;
    animation: shimmer 3s linear infinite;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
  }

  @keyframes shimmer {
    to {
      background-position: 200% center;
    }
  }

  .animate-fade-in {
    opacity: 0;
    animation: fadeIn 0.8s ease-out forwards;
  }

  .animate-slide-up {
    opacity: 0;
    transform: translateY(20px);
    animation: slideUp 0.8s ease-out forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* New animations */
  @keyframes badge-glow {
    0%, 100% {
      box-shadow: 0 0 20px rgba(255, 185, 56, 0.2);
      border-color: rgba(255, 185, 56, 0.5);
    }
    50% {
      box-shadow: 0 0 25px rgba(255, 185, 56, 0.25);
      border-color: rgba(255, 185, 56, 0.6);
    }
  }

  .animate-badge-glow {
    animation: badge-glow 4s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-3px);
    }
  }

  .animate-float {
    animation: float 3s ease-in-out infinite;
  }

  @keyframes pulse-subtle {
    0%, 100% {
      opacity: 0.9;
    }
    50% {
      opacity: 1;
    }
  }

  .animate-pulse-subtle {
    animation: pulse-subtle 3s ease-in-out infinite;
  }

  @keyframes pulse-slow {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 0.5; }
  }

  .animate-pulse-slow {
    animation: pulse-slow 6s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  .animate-word-in {
    animation: wordIn 0.8s cubic-bezier(0.34, 1.56, 0.64, 1) both;
  }

  .delay-100 {
    animation-delay: 100ms;
  }

  @keyframes wordIn {
    from {
      opacity: 0;
      transform: translateY(20%);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-gradient {
    animation: gradient 30s linear infinite;
    background-size: 400% auto;
  }

  @keyframes gradient {
    0% { background-position: 0% 50%; }
    100% { background-position: 400% 50%; }
  }

  /* Add glow effect */
  .drop-shadow-glow {
    filter: drop-shadow(0 0 15px rgba(255, 185, 56, 0.3))
           drop-shadow(0 0 50px rgba(46, 174, 78, 0.2));
    text-shadow: 0 0 20px rgba(255, 185, 56, 0.1);
  }

  /* Add slower gradient animation for description */
  .animate-gradient-slow {
    animation: gradient 45s linear infinite;
    background-size: 400% auto;
  }

  /* Add custom drop shadow for the logo */
  .drop-shadow-logo {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.3))
           drop-shadow(0 0 20px rgba(0, 0, 0, 0.2))
           drop-shadow(0 0 30px rgba(0, 0, 0, 0.1))
           brightness(0.95)
           contrast(1.05)
           saturate(1.1);
  }


  /* Updated and new animations */
  .animate-logo-intro {
    opacity: 0;
    transform: translateY(-20px);
    animation: logoIntro 1s cubic-bezier(0.22, 1, 0.36, 1) forwards;
  }

  .animate-title-intro {
    animation: titleIntro 1s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: 0.3s;
  }

  .animate-text-intro {
    animation: textIntro 1s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: 0.6s;
  }

  @keyframes logoIntro {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes titleIntro {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @keyframes textIntro {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  import * as THREE from 'three';

  function createRoundedRectShape(width: number, height: number, radius: number) {
    const shape = new THREE.Shape();
    
    shape.moveTo(-width/2 + radius, -height/2);
    shape.lineTo(width/2 - radius, -height/2);
    shape.quadraticCurveTo(width/2, -height/2, width/2, -height/2 + radius);
    shape.lineTo(width/2, height/2 - radius);
    shape.quadraticCurveTo(width/2, height/2, width/2 - radius, height/2);
    shape.lineTo(-width/2 + radius, height/2);
    shape.quadraticCurveTo(-width/2, height/2, -width/2, height/2 - radius);
    shape.lineTo(-width/2, -height/2 + radius);
    shape.quadraticCurveTo(-width/2, -height/2, -width/2 + radius, -height/2);

    return shape;
  }

  window.addEventListener('load', () => {
    const canvas = document.getElementById('art-gallery') as HTMLCanvasElement;
    const scene = new THREE.Scene();
    
    // Replace the existing lighting setup with:
    const ambientLight = new THREE.AmbientLight(0xffffff, 1.6);
    scene.add(ambientLight);

    // Replace the directional light with a focused spotlight
    const galleryLight = new THREE.SpotLight(0xffffff, 22.0, 50, Math.PI/3.2, 0.4, 0.5);
    galleryLight.position.set(0, 12, 5);  // Increased Y from 8 to 12
    galleryLight.target.position.set(0, 2, 0);  // Adjusted target Y from 0 to 2 to maintain angle
    galleryLight.castShadow = true;

    // Darker shadows
    galleryLight.shadow.bias = -0.0002;
    galleryLight.shadow.darkness = 1.0;

    scene.add(galleryLight);
    scene.add(galleryLight.target);

    // Brighter fill light
    const fillLight = new THREE.PointLight(0xffffff, 4.0, 30);
    fillLight.position.set(0, 5, 10);
    scene.add(fillLight);

    const camera = new THREE.PerspectiveCamera(50, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);
    camera.position.set(0, 3.5, 15);
    camera.rotation.x = -0.02;
    
    const renderer = new THREE.WebGLRenderer({ 
      canvas, 
      alpha: true, 
      antialias: true,
      powerPreference: "high-performance"
    });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(canvas.clientWidth, canvas.clientHeight);

    // Create art card textures
    const textureLoader = new THREE.TextureLoader();
    const artTextures = [
      textureLoader.load(document.getElementById('texture1')?.getAttribute('src') || ''),
      textureLoader.load(document.getElementById('texture2')?.getAttribute('src') || ''),
      textureLoader.load(document.getElementById('texture3')?.getAttribute('src') || '')
    ];

    // Create art cards with enhanced geometry and materials
    const cards: THREE.Mesh[] = [];
    const roundedRectShape = createRoundedRectShape(6, 6, 0.4);
    const extrudeSettings = {
      steps: 1,
      depth: 0.05,
      bevelEnabled: true,
      bevelThickness: 0.02,
      bevelSize: 0.02,
      bevelOffset: 0,
      bevelSegments: 3
    };
    const cardGeometry = new THREE.ExtrudeGeometry(roundedRectShape, extrudeSettings);
    
    // Adjust UV mapping with proper scaling
    const uvAttribute = cardGeometry.attributes.uv;
    const geometryPositions = cardGeometry.attributes.position;
    for (let i = 0; i < uvAttribute.count; i++) {
      const x = geometryPositions.getX(i);
      const y = geometryPositions.getY(i);
      uvAttribute.setXY(i, 
        (x + 3) / 6 * 0.9 + 0.05,          // Adjusted for new size
        1 - ((y + 3) / 6 * 0.9 + 0.05)     // Adjusted for new size
      );
    }

    // Update the card positions to include both start and end positions
    const cardPositions = [
      { 
        start: { x: 0, y: 2.5, z: 0.2, ry: 0 },  // Adjusted y from 2.0 to 2.5
        end: { x: -8.0, y: 2.7, z: 0, ry: 0.25 }  // Adjusted x from -7.0 to -8.0, y from 2.2 to 2.7
      },
      { 
        start: { x: 0, y: 2.45, z: 0.1, ry: 0 },  // Adjusted y from 1.95 to 2.45
        end: { x: 0, y: 2.4, z: 0, ry: -0.1 }  // Adjusted y from 1.9 to 2.4
      },
      { 
        start: { x: 0, y: 2.4, z: 0, ry: 0 },  // Adjusted y from 1.9 to 2.4
        end: { x: 8.0, y: 2.7, z: 0, ry: -0.25 }  // Adjusted x from 7.0 to 8.0, y from 2.2 to 2.7
      }
    ];
    
    artTextures.forEach((texture, index) => {
      texture.minFilter = THREE.LinearFilter;
      texture.magFilter = THREE.LinearFilter;
      texture.flipY = false;
      
      // Front face material with texture
      const frontMaterial = new THREE.MeshPhysicalMaterial({
        map: texture,
        transparent: true,
        side: THREE.DoubleSide,
        metalness: 0.3,
        roughness: 0.4,
        emissive: 0x444444,
        emissiveIntensity: 0.18,
        clearcoat: 0.6,
        clearcoatRoughness: 0.2
      });

      // Edge material
      const edgeMaterial = new THREE.MeshPhysicalMaterial({
        color: 0x222222,
        metalness: 0.2,
        roughness: 0.9,
        side: THREE.DoubleSide
      });

      // Create materials array - first material is for front/back faces, second for edges
      const materials = [frontMaterial, edgeMaterial];
      const card = new THREE.Mesh(cardGeometry, materials);

      // Rest of the card setup...
      const pos = cardPositions[index];
      card.position.set(pos.start.x, pos.start.y, pos.start.z);
      
      // Reset to simple rotation
      card.rotation.set(-0.1, pos.start.ry, 0);
      
      card.geometry.center();
      cards.push(card);
      scene.add(card);
    });

    // Animation state
    let animationProgress = 0;
    const animationDuration = 1200;
    const startTime = Date.now();

    function easeOutQuint(x: number): number {
      return 1 - Math.pow(1 - x, 5);
    }

    function animate() {
      requestAnimationFrame(animate);
      
      const currentTime = Date.now();
      const elapsed = currentTime - startTime;
      animationProgress = Math.min(1, elapsed / animationDuration);
      const eased = easeOutQuint(animationProgress);

      const time = currentTime * 0.001;

      // Keep only the card animation code below
      cards.forEach((card, index) => {
        const pos = cardPositions[index];
        
        // Smoother stagger timing
        const staggerDelay = index * 0.1;  // Reduced from 0.15
        const staggeredProgress = Math.max(0, Math.min(1, 
          (animationProgress - staggerDelay) / (1 - staggerDelay)
        ));
        const staggeredEase = easeOutQuint(staggeredProgress);
        
        // Add subtle initial rise before fan-out
        const riseProgress = Math.min(1, animationProgress * 2);
        const initialRise = (1 - Math.cos(riseProgress * Math.PI)) * 0.1;
        
        // Adjust float and rotation amplitudes for larger cards
        const floatOffset = Math.sin(time * 0.8 + index * Math.PI * 0.5) * 0.25 * staggeredProgress;
        const sideFloat = Math.cos(time * 0.5 + index * Math.PI * 0.3) * 0.15 * staggeredProgress;
        
        // Larger bounce effect
        const bounce = Math.sin(staggeredProgress * Math.PI) * 0.25 * (1 - staggeredProgress);
        
        // Combine all movements with smooth blending
        card.position.x = pos.start.x + (pos.end.x - pos.start.x) * staggeredEase + sideFloat;
        card.position.y = pos.start.y + initialRise + 
                         (pos.end.y - pos.start.y) * staggeredEase + 
                         floatOffset + bounce;
        card.position.z = pos.start.z + (pos.end.z - pos.start.z) * staggeredEase;
        
        // Smoother rotation transitions
        const rotateX = Math.sin(time * 0.7 + index * 0.5) * 0.1 * staggeredProgress;
        const rotateY = Math.sin(time * 0.4 + index * Math.PI) * 0.15 * staggeredProgress;
        const rotateZ = Math.cos(time * 0.6 + index * 0.8) * 0.05 * staggeredProgress;
        
        card.rotation.x = -0.1 + rotateX;
        card.rotation.y = pos.start.ry + (pos.end.ry - pos.start.ry) * staggeredEase + rotateY;
        card.rotation.z = rotateZ;
        
        // Add wave effect to emissive intensity
        if (Array.isArray(card.material)) {
          const frontMaterial = card.material[0] as THREE.MeshPhysicalMaterial;
          frontMaterial.emissiveIntensity = 0.1 + Math.sin(time * 2 + index * Math.PI * 0.5) * 0.05;  // Increased variation
        }
      });

      renderer.render(scene, camera);
    }

    function handleResize() {
      const newWidth = canvas.clientWidth;
      const newHeight = canvas.clientHeight;
      
      camera.aspect = newWidth / newHeight;
      camera.updateProjectionMatrix();
      
      renderer.setSize(newWidth, newHeight);
      renderer.setPixelRatio(window.devicePixelRatio);
    }

    window.addEventListener('resize', handleResize);
    animate();

    // Fine-tune fog
    scene.fog = new THREE.Fog(0x0a0f1c, 8, 35);
  });
</script>